{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "      <th>transactions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-05-04</td>\n",
       "      <td>46800</td>\n",
       "      <td>2239896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-05-06</td>\n",
       "      <td>45300</td>\n",
       "      <td>3291950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-05-07</td>\n",
       "      <td>45900</td>\n",
       "      <td>2142745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-05-11</td>\n",
       "      <td>46300</td>\n",
       "      <td>1592730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-05-12</td>\n",
       "      <td>46050</td>\n",
       "      <td>2364231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2015-05-13</td>\n",
       "      <td>45250</td>\n",
       "      <td>1896100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2015-05-14</td>\n",
       "      <td>45550</td>\n",
       "      <td>1889682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2015-05-15</td>\n",
       "      <td>45300</td>\n",
       "      <td>1215027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2015-05-18</td>\n",
       "      <td>45450</td>\n",
       "      <td>2195599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2015-05-19</td>\n",
       "      <td>46100</td>\n",
       "      <td>1510095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2015-05-20</td>\n",
       "      <td>46850</td>\n",
       "      <td>1784488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2015-05-21</td>\n",
       "      <td>46350</td>\n",
       "      <td>1880002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2015-05-26</td>\n",
       "      <td>48000</td>\n",
       "      <td>3594626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2015-05-27</td>\n",
       "      <td>48450</td>\n",
       "      <td>3441135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2015-05-28</td>\n",
       "      <td>49650</td>\n",
       "      <td>5512264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2015-05-29</td>\n",
       "      <td>51100</td>\n",
       "      <td>6512595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2015-06-01</td>\n",
       "      <td>50600</td>\n",
       "      <td>4623131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2015-06-02</td>\n",
       "      <td>51200</td>\n",
       "      <td>2173205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2015-06-03</td>\n",
       "      <td>49800</td>\n",
       "      <td>2724813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2015-06-04</td>\n",
       "      <td>48300</td>\n",
       "      <td>3262007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2015-06-05</td>\n",
       "      <td>49050</td>\n",
       "      <td>2134371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2015-06-09</td>\n",
       "      <td>48000</td>\n",
       "      <td>2168902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2015-06-10</td>\n",
       "      <td>47500</td>\n",
       "      <td>2649918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2015-06-11</td>\n",
       "      <td>47100</td>\n",
       "      <td>2696182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2015-06-12</td>\n",
       "      <td>46550</td>\n",
       "      <td>2307036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2015-06-15</td>\n",
       "      <td>46150</td>\n",
       "      <td>1775422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2015-06-16</td>\n",
       "      <td>44200</td>\n",
       "      <td>6161260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2015-06-17</td>\n",
       "      <td>44950</td>\n",
       "      <td>3461566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2015-06-18</td>\n",
       "      <td>44300</td>\n",
       "      <td>2225236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2015-06-19</td>\n",
       "      <td>43550</td>\n",
       "      <td>3858378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>895</th>\n",
       "      <td>2019-05-24</td>\n",
       "      <td>67600</td>\n",
       "      <td>3339145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>896</th>\n",
       "      <td>2019-05-27</td>\n",
       "      <td>66900</td>\n",
       "      <td>2214176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>897</th>\n",
       "      <td>2019-05-28</td>\n",
       "      <td>65900</td>\n",
       "      <td>12052399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>898</th>\n",
       "      <td>2019-05-29</td>\n",
       "      <td>66100</td>\n",
       "      <td>6056903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899</th>\n",
       "      <td>2019-05-30</td>\n",
       "      <td>65900</td>\n",
       "      <td>3023108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>900</th>\n",
       "      <td>2019-05-31</td>\n",
       "      <td>65300</td>\n",
       "      <td>3191350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>901</th>\n",
       "      <td>2019-06-03</td>\n",
       "      <td>66600</td>\n",
       "      <td>4020572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>902</th>\n",
       "      <td>2019-06-04</td>\n",
       "      <td>65100</td>\n",
       "      <td>2892681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>903</th>\n",
       "      <td>2019-06-07</td>\n",
       "      <td>65400</td>\n",
       "      <td>2355869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>904</th>\n",
       "      <td>2019-06-10</td>\n",
       "      <td>66800</td>\n",
       "      <td>3091757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>905</th>\n",
       "      <td>2019-06-11</td>\n",
       "      <td>67200</td>\n",
       "      <td>2429182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>906</th>\n",
       "      <td>2019-06-12</td>\n",
       "      <td>65700</td>\n",
       "      <td>2437640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>907</th>\n",
       "      <td>2019-06-13</td>\n",
       "      <td>63500</td>\n",
       "      <td>5947811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>908</th>\n",
       "      <td>2019-06-14</td>\n",
       "      <td>63100</td>\n",
       "      <td>3686472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>909</th>\n",
       "      <td>2019-06-17</td>\n",
       "      <td>63700</td>\n",
       "      <td>2435039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>910</th>\n",
       "      <td>2019-06-18</td>\n",
       "      <td>63400</td>\n",
       "      <td>1549497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911</th>\n",
       "      <td>2019-06-19</td>\n",
       "      <td>67200</td>\n",
       "      <td>6230370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>912</th>\n",
       "      <td>2019-06-21</td>\n",
       "      <td>65900</td>\n",
       "      <td>2403002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>2019-06-24</td>\n",
       "      <td>66900</td>\n",
       "      <td>2164462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>914</th>\n",
       "      <td>2019-06-25</td>\n",
       "      <td>66700</td>\n",
       "      <td>1873766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>915</th>\n",
       "      <td>2019-06-26</td>\n",
       "      <td>68900</td>\n",
       "      <td>5024201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>916</th>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>70200</td>\n",
       "      <td>5361201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>917</th>\n",
       "      <td>2019-06-28</td>\n",
       "      <td>69500</td>\n",
       "      <td>3117569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>918</th>\n",
       "      <td>2019-07-01</td>\n",
       "      <td>70000</td>\n",
       "      <td>3538183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>919</th>\n",
       "      <td>2019-07-02</td>\n",
       "      <td>71400</td>\n",
       "      <td>2495399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>920</th>\n",
       "      <td>2019-07-03</td>\n",
       "      <td>69100</td>\n",
       "      <td>2790684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>921</th>\n",
       "      <td>2019-07-05</td>\n",
       "      <td>68400</td>\n",
       "      <td>2043271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>922</th>\n",
       "      <td>2019-07-08</td>\n",
       "      <td>67400</td>\n",
       "      <td>2202260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>923</th>\n",
       "      <td>2019-07-09</td>\n",
       "      <td>69800</td>\n",
       "      <td>2912514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>924</th>\n",
       "      <td>2019-07-10</td>\n",
       "      <td>72100</td>\n",
       "      <td>845664</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>925 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           date  price  transactions\n",
       "0    2015-05-04  46800       2239896\n",
       "1    2015-05-06  45300       3291950\n",
       "2    2015-05-07  45900       2142745\n",
       "3    2015-05-11  46300       1592730\n",
       "4    2015-05-12  46050       2364231\n",
       "5    2015-05-13  45250       1896100\n",
       "6    2015-05-14  45550       1889682\n",
       "7    2015-05-15  45300       1215027\n",
       "8    2015-05-18  45450       2195599\n",
       "9    2015-05-19  46100       1510095\n",
       "10   2015-05-20  46850       1784488\n",
       "11   2015-05-21  46350       1880002\n",
       "12   2015-05-26  48000       3594626\n",
       "13   2015-05-27  48450       3441135\n",
       "14   2015-05-28  49650       5512264\n",
       "15   2015-05-29  51100       6512595\n",
       "16   2015-06-01  50600       4623131\n",
       "17   2015-06-02  51200       2173205\n",
       "18   2015-06-03  49800       2724813\n",
       "19   2015-06-04  48300       3262007\n",
       "20   2015-06-05  49050       2134371\n",
       "21   2015-06-09  48000       2168902\n",
       "22   2015-06-10  47500       2649918\n",
       "23   2015-06-11  47100       2696182\n",
       "24   2015-06-12  46550       2307036\n",
       "25   2015-06-15  46150       1775422\n",
       "26   2015-06-16  44200       6161260\n",
       "27   2015-06-17  44950       3461566\n",
       "28   2015-06-18  44300       2225236\n",
       "29   2015-06-19  43550       3858378\n",
       "..          ...    ...           ...\n",
       "895  2019-05-24  67600       3339145\n",
       "896  2019-05-27  66900       2214176\n",
       "897  2019-05-28  65900      12052399\n",
       "898  2019-05-29  66100       6056903\n",
       "899  2019-05-30  65900       3023108\n",
       "900  2019-05-31  65300       3191350\n",
       "901  2019-06-03  66600       4020572\n",
       "902  2019-06-04  65100       2892681\n",
       "903  2019-06-07  65400       2355869\n",
       "904  2019-06-10  66800       3091757\n",
       "905  2019-06-11  67200       2429182\n",
       "906  2019-06-12  65700       2437640\n",
       "907  2019-06-13  63500       5947811\n",
       "908  2019-06-14  63100       3686472\n",
       "909  2019-06-17  63700       2435039\n",
       "910  2019-06-18  63400       1549497\n",
       "911  2019-06-19  67200       6230370\n",
       "912  2019-06-21  65900       2403002\n",
       "913  2019-06-24  66900       2164462\n",
       "914  2019-06-25  66700       1873766\n",
       "915  2019-06-26  68900       5024201\n",
       "916  2019-06-27  70200       5361201\n",
       "917  2019-06-28  69500       3117569\n",
       "918  2019-07-01  70000       3538183\n",
       "919  2019-07-02  71400       2495399\n",
       "920  2019-07-03  69100       2790684\n",
       "921  2019-07-05  68400       2043271\n",
       "922  2019-07-08  67400       2202260\n",
       "923  2019-07-09  69800       2912514\n",
       "924  2019-07-10  72100        845664\n",
       "\n",
       "[925 rows x 3 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_hynix = pd.read_csv(\"C:/Users/CPB06GameN/Desktop/mini/raw/skhynix.csv\")\n",
    "df_hynix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-05-04</td>\n",
       "      <td>46800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-05-06</td>\n",
       "      <td>45300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-05-07</td>\n",
       "      <td>45900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-05-11</td>\n",
       "      <td>46300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-05-12</td>\n",
       "      <td>46050</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  price\n",
       "0  2015-05-04  46800\n",
       "1  2015-05-06  45300\n",
       "2  2015-05-07  45900\n",
       "3  2015-05-11  46300\n",
       "4  2015-05-12  46050"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "del df_hynix['transactions']\n",
    "df_hynix.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-05-04</td>\n",
       "      <td>1081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-05-06</td>\n",
       "      <td>1081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-05-07</td>\n",
       "      <td>1093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-05-08</td>\n",
       "      <td>1090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-05-11</td>\n",
       "      <td>1092</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  price\n",
       "0  2015-05-04   1081\n",
       "1  2015-05-06   1081\n",
       "2  2015-05-07   1093\n",
       "3  2015-05-08   1090\n",
       "4  2015-05-11   1092"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ex = pd.read_csv(\"C:/Users/CPB06GameN/Desktop/mini/raw/exchange.csv\")\n",
    "df_ex.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>price_x</th>\n",
       "      <th>price_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-05-04</td>\n",
       "      <td>1081</td>\n",
       "      <td>46800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-05-06</td>\n",
       "      <td>1081</td>\n",
       "      <td>45300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-05-07</td>\n",
       "      <td>1093</td>\n",
       "      <td>45900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-05-11</td>\n",
       "      <td>1092</td>\n",
       "      <td>46300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-05-12</td>\n",
       "      <td>1097</td>\n",
       "      <td>46050</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  price_x  price_y\n",
       "0  2015-05-04     1081    46800\n",
       "1  2015-05-06     1081    45300\n",
       "2  2015-05-07     1093    45900\n",
       "3  2015-05-11     1092    46300\n",
       "4  2015-05-12     1097    46050"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ex_hy = pd.merge(df_ex, df_hynix, on=\"date\")\n",
    "df_ex_hy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>exchange</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-05-04</td>\n",
       "      <td>1081</td>\n",
       "      <td>46800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-05-06</td>\n",
       "      <td>1081</td>\n",
       "      <td>45300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-05-07</td>\n",
       "      <td>1093</td>\n",
       "      <td>45900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-05-11</td>\n",
       "      <td>1092</td>\n",
       "      <td>46300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-05-12</td>\n",
       "      <td>1097</td>\n",
       "      <td>46050</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  exchange  price\n",
       "0  2015-05-04      1081  46800\n",
       "1  2015-05-06      1081  45300\n",
       "2  2015-05-07      1093  45900\n",
       "3  2015-05-11      1092  46300\n",
       "4  2015-05-12      1097  46050"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ex_hy = df_ex_hy.rename(columns={\"price_x\":\"exchange\"})\n",
    "df_ex_hy = df_ex_hy.rename(columns={\"price_y\":\"price\"})\n",
    "df_ex_hy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'matplotlib.pyplot' has no attribute 'xalbel'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-e62f26a0ab78>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf_ex_hy\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"exchange\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdf_ex_hy\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"price\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mxalbel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'price(won)'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0myalbel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'exchage(won/$)'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: module 'matplotlib.pyplot' has no attribute 'xalbel'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df_ex_hy[\"exchange\"], df_ex_hy[\"price\"])\n",
    "plt.xalbel('price(won)')\n",
    "plt.yalbel('exchage(won/$)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.34364247e+03, -4.46392449e+05],\n",
       "       [-4.46392449e+05,  4.12045736e+08]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exchange = df_ex_hy[(\"exchange\")]\n",
    "price = df_ex_hy[(\"price\")]\n",
    "np.cov(exchange, price)\n",
    "## -4.46392449e+05 ->-446392.449  x가 증가하면 y는 감소하는 경향 -> 미달러 환율이 높을 수록 주가가 낮아짐"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.        , -0.59993233],\n",
       "       [-0.59993233,  1.        ]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.corrcoef(exchange, price)\n",
    "#피어슨 상관계수 : -0.59993233\n",
    "# r이 -1.0과 -0.7 사이이면, 강한 음적 선형관계,\n",
    "# r이 -0.7과 -0.3 사이이면, 뚜렷한 음적 선형관계,\n",
    "# r이 -0.3과 -0.1 사이이면, 약한 음적 선형관계,\n",
    "# r이 -0.1과 +0.1 사이이면, 거의 무시될 수 있는 선형관계,\n",
    "# r이 +0.1과 +0.3 사이이면, 약한 양적 선형관계,\n",
    "# r이 +0.3과 +0.7 사이이면, 뚜렷한 양적 선형관계,\n",
    "# r이 +0.7과 +1.0 사이이면, 강한 양적 선형관계"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#단순 선형 회귀분석 단순 선형 회귀분석을 통해 \"환율이 1% 증가하면 sk주가가 몇 % 증가하는가?\"에 대한 대답을 확인해 볼 것이다.\n",
    "# 회귀분석이란 변수들간의 관계를 파악함으로써 어떤 특정한 변수의 값을 다른 변수들로 설명하고 예측하는 통계적 기법"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'tensorflow'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-21-fc95b6bb51f3>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m##단순선형회귀분석\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mtensorflow\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mtf\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'tensorflow'"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\CPB06GameN\\Anaconda3\\lib\\site-packages\\h5py\\__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
